import networkx as nx
import time
from src.graph.graph import Graph
from src.logging import *
from src.evaluation.newEvaluationMethod import newEvaluationMethod
import functions
from datetime import timedelta

start_time = time.time()

G = nx.DiGraph()

print('Path Mining Tool Demo by USF SEES Lab')
print()

if __name__ == '__main__':

    max_pat_len = 8
    max_solutions = 10
    def_f = ""
    trace_f = ""

    # Uncomment corresponding lines to genearte solutions for different traces

    # For gem5 traces

    # Full system (FS) simulation traces
    # def_f = './traces/gem5_traces/fs/definition/fs_def.msg'
    # def_f = './traces/gem5_traces/fs/definition/def-FS-RublePrintFormat.msg'
    # fs unsliced
    # trace_f = ['./traces/gem5_traces/fs/unsliced/unsliced0.jbl']
    # trace_f = ['./traces/gem5_traces/fs/unsliced/fs_boot_unsliced.txt']
    # fs packet id sliced
    # trace_f = ['./traces/gem5_traces/fs/packet_sliced/packet_sliced.jbl']
    # fs memory address sliced
    # trace_f = ['./traces/gem5_traces/fs/addr_sliced/address_sliced_no_duplicates.jbl']

    # Snoop (SE) traces
    # def_f = './traces/gem5_traces/snoop/definition/paterson_def.msg'
    # snoop unsliced
    # trace_f = ['./traces/gem5_traces/snoop/unsliced/paterson_unsliced.txt']
    # snoop packet id sliced
    # trace_f = ['./traces/gem5_traces/snoop/packet_sliced/packet_sliced.jbl']
    # snoop memory address sliced
    # trace_f = ['./traces/gem5_traces/snoop/addr_sliced/address_sliced.jbl']

    # Threads (SE) traces
    # def_f = './traces/gem5_traces/threads/definition/threads_def.msg' # This definition file doesn't include any initial or terminal nodes
    # def_f = './traces/gem5_traces/threads/definition/definition.txt'  
    # def_f = './traces/gem5_traces/threads/definition/renamedDefinitionFile.msg'  
    # def_f = './traces/gem5_traces/threads/definition/myDefinition.txt'  
    # def_f = './traces/gem5_traces/threads/definition/newDefinition.txt' 
    # def_f = './traces/gem5_traces/threads/definition/generatedByMeDef.msg'  
    # def_f = './traces/gem5_traces/threads/definition/TestDef.msg'  # Threads Final Definition file generated By Bardia
    # threads unsliced
    # trace_f = ['./traces/gem5_traces/threads/unsliced/unsliced.txt']
    # trace_f = ['./traces/gem5_traces/threads/unsliced/testTrace.txt']   # Threads Final Trace file generated By Bardia
    # trace_f = ['./traces/gem5_traces/threads/unsliced/generatedByMeThreadsTraceFile.txt']
    # threads packet id sliced
    # trace_f = ['./traces/gem5_traces/threads/packet_sliced/packet_sliced.jbl']   
    # snoop memory address sliced
    # trace_f = ['./traces/gem5_traces/threads/addr_sliced/address_sliced.jbl']
    # trace_f = ['./traces/gem5_traces/threads/addr_sliced/address_sliced_compact.jbl']


    # For synthetic traces
    def_f = './traces/synthetic/newLarge.msg'
    # def_f = './traces/synthetic/large.msg'
    # def_f = './traces/synthetic/medium.msg'
    # def_f = './traces/synthetic/small.msg'
    # def_f = './traces/synthetic/Test/testDefinition.msg'

    # small traces
    # trace_f = ['./traces/synthetic/trace-small-5.txt']
    # trace_f = ['./traces/synthetic/trace-small-10.txt']
    # trace_f = ['./traces/synthetic/trace-small-20.txt']
    # trace_f = ['./traces/synthetic/trace-small-5-New.txt']
    # trace_f = ['./traces/synthetic/trace-small-test.txt']
    # trace_f = ['./traces/synthetic/trace-small-test2.txt']
    # trace_f = ['./traces/synthetic/trace-small-test3.txt']

    # large traces
    trace_f = ['./traces/synthetic/trace-large-5.txt']
    # trace_f = ['./traces/synthetic/trace-large-10.txt']
    # trace_f = ['./traces/synthetic/trace-large-20.txt']
    # trace_f = ['./traces/synthetic/new-trace-large-20.txt']

    # trace_f = ['./traces/synthetic/testCode.txt']
    # trace_f = ['./traces/synthetic/Test/testTrace.txt']

    # For Testing 
    def_f = './traces/ForTest/testDefinitionFile.txt'
    trace_f = ['./traces/ForTest/testTrace.txt']
    # def_f = './traces/ForTest/L3cacheTestDefinitionFile.txt'
    # trace_f = ['./traces/ForTest/L3cacheTestTrace.txt']

    # traceType = "synthetic"
    # traceType = "gem5"
    filters_filename = None
    rank_filename    = None

    graph = Graph()
    graph.set_max_height(max_pat_len)
    graph.set_max_solutions(max_solutions)

    
    if "gem5" in def_f:
        ####################### For Threads
        graph.window = False
    else:
        ####################### For Large20
        graph.window = False
    graph.window_size = 50

    if (graph.window and (graph.window <= 0)):
        print("Winodw size must > 0")
        exit()
    if(graph.window):
        print("Added window slicing...window size: ", graph.window_size)
        print()

    log('Reading the message definition file %s... ' % def_f)
    if def_f=="":
        exit()
    graph.read_message_file(def_f)
    log('Done\n\n')

    traces = None
    log('Reading the trace file(s) %s... ' % trace_f)
    graph.read_trace_file_list(trace_f)
    log('Trace reading and processing status: Done\n\n')
