import os
import networkx as nx

from src.graph.graph import Graph
import time
from src.logging import *
import math
from src.evaluation.newEvaluationMethod import newEvaluationMethod
from src.evaluation.newEvaluationMethodOptimized import newEvaluationMethodOptimized
from src.evaluation.maxMatchedPaths import maxMatchedPaths
from src.evaluation.backTrackingEvaluation import backTrackingEvaluation
from src.evaluation.linkedListDS import Node
from src.evaluation.linkedListDS import SLinkedList

from datetime import timedelta

from numpy.random import seed
from numpy.random import randint

from copy import copy, deepcopy

import functions



if __name__ == '__main__':
    
    start_time = time.time()

    max_pat_len = 10
    max_solutions = 10
    def_f = ""
    trace_f = ""


    # For synthetic traces
    def_f = './traces/synthetic/newLarge.msg'
    # def_f = './traces/synthetic/large.msg'
    # def_f = './traces/synthetic/medium.msg'
    # def_f = './traces/synthetic/small.msg'
    # def_f = './traces/synthetic/Test/testDefinition.msg'

    # small traces
    # trace_f = ['./traces/synthetic/trace-small-5.txt']
    # trace_f = ['./traces/synthetic/trace-small-10.txt']
    # trace_f = ['./traces/synthetic/trace-small-20.txt']
    # trace_f = ['./traces/synthetic/trace-small-5-New.txt']
    # trace_f = ['./traces/synthetic/trace-small-test.txt']
    # trace_f = ['./traces/synthetic/trace-small-test2.txt']
    # trace_f = ['./traces/synthetic/trace-small-test3.txt']

    # large traces
    # trace_f = ['./traces/synthetic/trace-large-5.txt']
    # trace_f = ['./traces/synthetic/trace-large-10.txt']
    # trace_f = ['./traces/synthetic/trace-large-20.txt']
    trace_f = ['./traces/synthetic/new-trace-large-20.txt']

    # For Testing 
    # def_f = './traces/ForTest/testDefinitionFile.txt'
    # trace_f = ['./traces/ForTest/testTrace.txt']
    # def_f = './traces/ForTest/testDefinitionFile.txt'
    # trace_f = ['./traces/ForTest/testTrace.txt']
    # def_f = './traces/ForTest/L3cacheTestDefinitionFile.txt'
    # trace_f = ['./traces/ForTest/L3cacheTestTrace.txt']


    # Threads (SE) traces
    # def_f = './traces/gem5_traces/threads/definition/threads_def.msg' # This definition file doesn't include any initial or terminal nodes
    # def_f = './traces/gem5_traces/threads/definition/definition.txt'  
    # def_f = './traces/gem5_traces/threads/definition/renamedDefinitionFile.msg'  
    # def_f = './traces/gem5_traces/threads/definition/myDefinition.txt'  
    # def_f = './traces/gem5_traces/threads/definition/newDefinition.txt' 
    # def_f = './traces/gem5_traces/threads/definition/generatedByMeDef.msg'  
    def_f = './traces/gem5_traces/threads/definition/TestDef.msg'  # Threads Final Definition file generated By Bardia
    # threads unsliced
    # trace_f = ['./traces/gem5_traces/threads/unsliced/unsliced.txt']
    trace_f = ['./traces/gem5_traces/threads/unsliced/testTrace.txt']   # Threads Final Trace file generated By Bardia
    # trace_f = ['./traces/gem5_traces/threads/unsliced/generatedByMeThreadsTraceFile.txt']
    # threads packet id sliced
    # trace_f = ['./traces/gem5_traces/threads/packet_sliced/packet_sliced.jbl']   
    # snoop memory address sliced
    # trace_f = ['./traces/gem5_traces/threads/addr_sliced/address_sliced.jbl']
    # trace_f = ['./traces/gem5_traces/threads/addr_sliced/address_sliced_compact.jbl']

    filters_filename = None
    rank_filename    = None

    graph = Graph()
    graph.set_max_height(max_pat_len)
    graph.set_max_solutions(max_solutions)

    
    if "gem5" in def_f:
        ####################### For Threads
        graph.window = False
    else:
        ####################### For Large20
        graph.window = False
    graph.window_size = 50

    if (graph.window and (graph.window <= 0)):
        print("Winodw size must > 0")
        exit()
    if(graph.window):
        print("Added window slicing...window size: ", graph.window_size)
        print()

    log('Reading the message definition file %s... ' % def_f)
    if def_f=="":
        exit()
    graph.read_message_file(def_f)
    log('Done\n\n')

    traces = None
    log('Reading the trace file(s) %s... ' % trace_f)
    graph.read_trace_file_list(trace_f)
    log('Trace reading and processing status: Done\n\n')
    
    ######################################################################## Start ########################################################################

    maxNodeNumber = 0
    for i in graph.nodes:
        if maxNodeNumber < int(i):
            maxNodeNumber = int(i)

    adjMatrix = [[0 for i in range(maxNodeNumber+1)] for j in range(maxNodeNumber+1)]
    print("My initial nodes: ", graph.myInitialNodes)
    print("My terminal nodes: ", graph.myTerminalNodes)


    f = open("localPatrerns.txt", "a")
    localPatternCounter = 0
    for i in graph.nodes:
        print(i, ":", end=" ")
        for n in graph.networkxGraph.neighbors(int(i)):
            print(n, end=" ")
            if int(i) in graph.myInitialNodes and int(n) in graph.myTerminalNodes:
                adjMatrix[int(i)][int(n)] = 2
            else:
                adjMatrix[int(i)][int(n)] = 1
            f.write(str(i) + "_" + str(n) + "\n ")
            localPatternCounter += 1
        print()
    print("Total Local Patterns: ", localPatternCounter)
    f.close()

    counterTest = 0
    specialCounter = 0
    newReducedTrace = []
    print("Number of tokens (messages): ", len(graph.trace_tokens))
    j = 0
    # for i in range(len(graph.trace_tokens)):
    while j < len(graph.trace_tokens):
        if j == len(graph.trace_tokens)-1:
            newReducedTrace.append(graph.trace_tokens[j])
            break
        if adjMatrix[int(graph.trace_tokens[j])][int(graph.trace_tokens[j+1])] == 2:
            specialCounter += 2
            j += 2
        # elif adjMatrix[int(graph.trace_tokens[j])][int(graph.trace_tokens[j+1])] == 1:
        #     newReducedTrace.append("A")
        #     counterTest += 1
        #     j += 2
        #     # i += 2
        else:
            newReducedTrace.append(graph.trace_tokens[j])
            j += 1

    print("Number of tokens in the reduced trace: ", len(newReducedTrace))
    print("Counter test =", counterTest)
    print("Special counter =", specialCounter)

    f = open("reducedTrace.txt", "w")
    for i in newReducedTrace:
        f.write(str(i) + " ")
    f.close()

    ######################################################################## END ########################################################################


    
    
    
    
    ######################################################################## Start ########################################################################
    all_paths_sorted = [[] for x in range(graph.maxInitials+1)]  # = []
    selected_paths   = [[] for x in range(graph.maxInitials+1)] 

    if "gem5" in def_f:
        pruned_graph = functions.pruningGraph(graph.networkxGraph, graph, "gem5")
    else:
        pruned_graph = functions.pruningGraph(graph.networkxGraph, graph, "synthetic")
    # 

    # print("Starting nodes = ", graph.myInitialNodes)
    # print("Ending nodes = ",   graph.myTerminalNodes, "\n")
    # exit()
    print(graph.finalCorrespondingTerminalArray)
    
    all_paths_sorted = functions.pathPoolFinder(graph, pruned_graph, graph.myInitialNodes, graph.finalCorrespondingTerminalArray)
    
    selected_paths   = functions.modelSelector(all_paths_sorted, graph)


    elapsed_time = time.time() - start_time
    msg = "\nTrace reading and proc, and also finding all paths from initial to terminal messages took: %s secs (Wall clock time)" % timedelta(milliseconds=round(elapsed_time*1000))
    print(msg)

    # Found for Rubel traces (Renamed threads)
    # selected_paths =  [[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9],[0, 1, 2, 7, 8, 9],[0, 9]], [], [], [], [], [], [], [], [], [], [[10, 11, 12, 13, 14, 15, 16, 17, 18, 19],[10, 11, 12, 17, 18, 19],[10, 60, 45, 70, 64, 19],[10, 60, 61, 63, 64, 19],[10, 11, 18, 19],[10, 19]], [], [], [], [], [], [], [], [], [], [[20, 1, 2, 3, 4, 5, 6, 7, 8, 21],[20, 1, 2, 7, 8, 21],[20, 1, 8, 21],[20, 21]], [], [], [], [], [], [], [], [], [], [], [], [], [], [[34, 35, 37, 38],[34, 38]], [], [], [], [], [[39, 35, 37, 42],[39, 42]], [], [], [], [[43, 44, 47, 49, 50, 51],[43, 44, 50, 51],[43, 52, 53, 51],[43, 51]]]
    # Found for threads by me
    # selected_paths = [[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9],[0, 1, 2, 7, 8, 9],[0, 1, 2, 17, 8, 9],[0, 1, 8, 9],[0, 9]], [], [], [], [], [], [], [], [], [], [[10, 11, 12, 13, 14, 15, 16, 17, 18, 19],[10, 11, 12, 17, 18, 19],[10, 21, 22, 19],[10, 19]], [], [], [], [], [], [], [], [], [], [[20, 11, 2, 3, 4, 5, 6, 7, 22, 23],[20, 11, 12, 13, 14, 15, 16, 17, 18, 23],[20, 21, 2, 3, 4, 5, 6, 7, 18, 23],[20, 21, 2, 3, 4, 5, 6, 7, 22, 23],[20, 21, 2, 3, 4, 5, 6, 7, 57, 23],[20, 26, 2, 3, 4, 5, 6, 7, 22, 23],[20, 26, 12, 13, 14, 15, 16, 7, 22, 23],[20, 26, 12, 13, 14, 15, 16, 17, 18, 23],[20, 27, 25, 31, 32, 5, 71, 68, 57, 23],[20, 53, 2, 3, 4, 5, 6, 7, 22, 23],[20, 21, 2, 29, 6, 7, 22, 23],[20, 21, 2, 31, 6, 7, 22, 23],[20, 26, 2, 29, 6, 7, 22, 23],[20, 26, 25, 29, 71, 68, 57, 23],[20, 27, 2, 29, 6, 7, 22, 23],[20, 27, 28, 29, 71, 68, 57, 23],[20, 11, 2, 7, 22, 23],[20, 11, 12, 17, 18, 23],[20, 21, 2, 7, 18, 23],[20, 21, 2, 7, 22, 23],[20, 21, 2, 7, 57, 23],[20, 21, 25, 68, 57, 23],[20, 26, 2, 7, 22, 23],[20, 27, 28, 7, 57, 23],[20, 27, 28, 17, 57, 23],[20, 27, 28, 68, 57, 23],[20, 53, 2, 7, 22, 23],[20, 11, 18, 23],[20, 21, 22, 23],[20, 21, 57, 23],[20, 53, 57, 23],[20, 23]], [], [], [], [], [], [], [], [], [], [], [], [], [[33, 11, 12, 13, 14, 15, 16, 17, 18, 34],[33, 11, 12, 17, 18, 34],[33, 34]], [], [[35, 36]], [], [[37, 38, 2, 3, 4, 5, 6, 7, 39, 40],[37, 38, 25, 3, 4, 5, 6, 7, 39, 40],[37, 38, 2, 7, 39, 40],[37, 38, 25, 7, 39, 40],[37, 38, 39, 40],[37, 40]], [], [], [], [[41, 42, 2, 3, 4, 5, 6, 17, 43, 44],[41, 42, 2, 3, 4, 15, 16, 17, 43, 44],[41, 42, 2, 13, 14, 15, 16, 17, 43, 44],[41, 42, 12, 13, 14, 15, 16, 7, 43, 44],[41, 42, 12, 13, 14, 15, 16, 17, 43, 44],[41, 52, 55, 68, 58, 44],[41, 42, 43, 44],[41, 52, 58, 44],[41, 44]], [], [], [], [[45, 42, 2, 3, 4, 5, 6, 7, 43, 49],[45, 42, 2, 3, 4, 5, 6, 7, 48, 49],[45, 42, 2, 13, 14, 15, 16, 7, 48, 49],[45, 42, 12, 13, 14, 15, 16, 17, 43, 49],[45, 46, 2, 3, 4, 5, 6, 7, 48, 49],[45, 46, 2, 7, 48, 49],[45, 46, 25, 7, 48, 49],[45, 46, 25, 17, 43, 49],[45, 66, 2, 7, 48, 49],[45, 46, 48, 49],[45, 46, 58, 49],[45, 52, 58, 49],[45, 49]], [], [[47, 11, 2, 3, 4, 5, 6, 7, 18, 23],[47, 11, 2, 3, 4, 5, 6, 7, 22, 23],[47, 21, 2, 3, 4, 5, 6, 7, 18, 23],[47, 21, 2, 3, 4, 5, 6, 7, 22, 23],[47, 21, 2, 3, 4, 5, 6, 7, 57, 23],[47, 23]], [], [], [[50, 11, 2, 3, 4, 5, 6, 7, 22, 23],[50, 21, 2, 3, 4, 5, 6, 7, 22, 23],[50, 23]], [[51, 42, 43, 59],[51, 52, 58, 59],[51, 59]], [], [], [], [], [], [], [], [], [[60, 61]], [], [[62, 42, 2, 7, 48, 49],[62, 46, 2, 7, 48, 49],[62, 46, 48, 49],[62, 49]], [[63, 19]], [], [], [], [], [], [], []]
    # selected_paths = [[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9],[0, 1, 2, 7, 8, 9],[0, 1, 2, 17, 8, 9],[0, 1, 8, 9],[0, 9]], [], [], [], [], [], [], [], [], [], [[10, 11, 12, 13, 16, 17, 18, 19],[10, 11, 12, 17, 18, 19],[10, 26, 18, 19],[10, 19]], [], [], [], [], [], [], [], [], [], [[20, 11, 2, 3, 6, 7, 22, 23],[20, 11, 12, 13, 16, 17, 18, 23],[20, 21, 2, 7, 18, 23],[20, 21, 2, 7, 22, 23],[20, 21, 12, 17, 18, 23],[20, 26, 2, 7, 18, 23],[20, 26, 2, 7, 22, 23],[20, 26, 12, 7, 22, 23],[20, 26, 25, 7, 22, 23],[20, 26, 25, 17, 18, 23],[20, 27, 25, 17, 18, 23],[20, 27, 28, 7, 22, 23],[20, 53, 2, 7, 22, 23],[20, 11, 18, 23],[20, 21, 22, 23],[20, 26, 22, 23],[20, 23]], [], [], [], [], [], [], [], [], [], [[30, 11, 2, 3, 32],[30, 11, 12, 13, 32],[30, 21, 2, 3, 32],[30, 26, 2, 3, 32]], [], [], [[33, 11, 12, 13, 16, 17, 18, 34],[33, 11, 12, 17, 18, 34],[33, 34]], [], [[35, 36]], [], [[37, 38, 2, 3, 4, 5, 6, 7, 39, 40],[37, 38, 25, 3, 6, 7, 39, 40],[37, 38, 2, 7, 39, 40],[37, 38, 25, 7, 39, 40],[37, 38, 39, 40],[37, 40]], [], [], [], [[41, 42, 2, 3, 6, 17, 43, 44],[41, 42, 2, 3, 16, 17, 43, 44],[41, 42, 2, 13, 16, 17, 43, 44],[41, 42, 12, 13, 16, 7, 43, 44],[41, 42, 12, 13, 16, 17, 43, 44],[41, 42, 43, 44],[41, 44]], [], [], [], [[45, 42, 2, 3, 6, 7, 43, 49],[45, 42, 2, 3, 6, 7, 48, 49],[45, 42, 2, 13, 16, 7, 48, 49],[45, 42, 12, 3, 6, 17, 43, 49],[45, 42, 12, 13, 6, 7, 48, 49],[45, 42, 12, 13, 16, 17, 43, 49],[45, 46, 2, 7, 48, 49],[45, 46, 25, 7, 48, 49],[45, 46, 55, 7, 48, 49],[45, 66, 2, 7, 48, 49],[45, 42, 43, 49],[45, 46, 48, 49],[45, 49]], [], [[47, 11, 2, 3, 6, 7, 18, 23],[47, 11, 2, 3, 6, 7, 22, 23],[47, 21, 2, 7, 18, 23],[47, 21, 2, 7, 22, 23],[47, 26, 2, 7, 22, 23],[47, 23]], [], [], [[50, 21, 2, 7, 22, 23],[50, 23]], [[51, 42, 43, 59],[51, 59]], [], [], [[54, 11, 2, 3, 6, 7, 57],[54, 26, 2, 7, 57],[54, 21, 57],[54, 53, 57]], [], [], [], [], [], [[60, 61]], [], [[62, 46, 2, 7, 48, 49],[62, 46, 48, 49],[62, 49]], [[63, 21, 2, 3, 32]], [], [[65, 52, 58]], [], [], [], [], [[70, 46, 2, 3, 32]]]

    ##############################################################################################################################################
    # evaluationStartTime = time.time()
    # resultFileName = "test.txt"
    # # ev = newEvaluationMethod(trace_f[0], selected_paths, graph.myInitialNodes, graph.myTerminalNodes, resultFileName)
    # # res1, res2 = ev.Evaluate()
    # ev = newEvaluationMethodOptimized(trace_f[0], selected_paths, graph.myInitialNodes, graph.myTerminalNodes, resultFileName)
    # res1, res2, notAccepted = ev.Evaluate()
    # # ev = maxMatchedPaths(trace_f[0], selected_paths, graph.myInitialNodes, graph.myTerminalNodes, resultFileName)
    # # res1, res2 = ev.Evaluate()
    # # ev = backTrackingEvaluation(trace_f[0], selected_paths, graph.myInitialNodes, graph.myTerminalNodes, resultFileName)
    # # res1, res2 = ev.Evaluate()

    # evaluationTime = time.time() - evaluationStartTime
    # msg = "\nEvaluation phase took: %s secs (Wall clock time)" % timedelta(milliseconds=round(evaluationTime*1000))
    # print(msg)
    ##############################################################################################################################################

    res1 = functions.modelrefinement("reducedTrace.txt", all_paths_sorted, selected_paths, graph.myInitialNodes, graph.myTerminalNodes, preFound=specialCounter)
    # res1 = functions.modelrefinement(trace_f[0], all_paths_sorted, selected_paths, graph.myInitialNodes, graph.myTerminalNodes, preFound=specialCounter)

    print ("\nAcceptance Ratio = ", res1)
    elapsed_time = time.time() - start_time
    
    msg = "\nIn Total it took: %s secs (Wall clock time)" % timedelta(milliseconds=round(elapsed_time*1000))
    print(msg)
    # print(selected_paths)

    # totalNotAccepted = 0
    # print("Not Accepted")
    # for i in range(len(notAccepted)):
    #     if notAccepted[i]:
    #         print (i, " : ", notAccepted[i])
    #         totalNotAccepted += notAccepted[i]
    # print ("Not accepted in total = ", totalNotAccepted, "\n")

    exit()
